---
description: 
globs: 
alwaysApply: true
---
# AI Component Animation Guide

When we are done putting all the content on a page, we will go back through at the end and add polish like background colors and animations.

## Overview
This guide teaches future AI how to implement dynamic animations **within components** for professional, engaging user experiences. Focus on cascading animations, staggered effects, and component-level motion across all business types.

## Business Type Animation Guidelines

### **Professional Services (Law, Finance, Consulting, Insurance)**
**Mood**: Trustworthy, stable, authoritative, conservative
**Customer Expectation**: Reliability and competence
**Animation Characteristics**:
- **Stagger Delay**: 0.1-0.15s between items
- **Duration**: 0.6-0.8s for deliberate, confident feel
- **Easing**: "easeOut" for smooth, professional motion
- **Transforms**: Subtle y-movement (10-20px), gentle opacity
- **Use Cases**: Subtle hero reveals, testimonial cascades, service lists

```tsx
const professionalVariants = {
  hidden: { opacity: 0, y: 15 },
  visible: { 
    opacity: 1, 
    y: 0,
    transition: { duration: 0.7, ease: "easeOut" }
  }
};
```

### **Tech/SaaS (Software, Apps, Startups)**
**Mood**: Innovative, efficient, cutting-edge, fast-paced
**Customer Expectation**: Modern efficiency and innovation
**Animation Characteristics**:
- **Stagger Delay**: 0.05-0.1s for snappy feel
- **Duration**: 0.3-0.5s for quick, efficient motion
- **Easing**: "easeOut" or custom spring for energy
- **Transforms**: Scale, x/y movement, dynamic entrances
- **Use Cases**: Feature grids, pricing tables, dashboard metrics

```tsx
const techVariants = {
  hidden: { opacity: 0, scale: 0.95, y: 20 },
  visible: { 
    opacity: 1, 
    scale: 1, 
    y: 0,
    transition: { duration: 0.4, ease: "easeOut" }
  }
};
```

### **Local Services (HVAC, Plumbing, Electrical, Contractors)**
**Mood**: Reliable, straightforward, no-nonsense, trustworthy
**Customer Expectation**: Dependability and practical solutions
**Animation Characteristics**:
- **Stagger Delay**: 0.12s for steady, reliable rhythm
- **Duration**: 0.5-0.7s for solid, dependable feel
- **Easing**: "easeOut" with slight bounce for friendliness
- **Transforms**: Simple y-movement, avoid complex effects
- **Use Cases**: Service listings, before/after galleries, contact forms

```tsx
const localServiceVariants = {
  hidden: { opacity: 0, y: 25 },
  visible: { 
    opacity: 1, 
    y: 0,
    transition: { 
      duration: 0.6, 
      ease: "easeOut",
      type: "spring",
      stiffness: 120,
      damping: 12
    }
  }
};
```

### **Personal Care (Car Detailing, Salons, Spas, Beauty)**
**Mood**: Polished, refined, attention to detail, luxurious
**Customer Expectation**: Quality craftsmanship and care
**Animation Characteristics**:
- **Stagger Delay**: 0.15-0.2s for luxurious pacing
- **Duration**: 0.6-0.9s for elegant, refined motion
- **Easing**: Custom springs with gentle bounce
- **Transforms**: Smooth scale, elegant slides, gentle rotations
- **Use Cases**: Portfolio galleries, service showcases, testimonials

```tsx
const personalCareVariants = {
  hidden: { opacity: 0, scale: 0.9, y: 20 },
  visible: { 
    opacity: 1, 
    scale: 1, 
    y: 0,
    transition: { 
      type: "spring", 
      stiffness: 100, 
      damping: 15,
      duration: 0.8
    }
  }
};
```

### **Food & Beverage (Restaurants, Ice Cream, Cafes, Bakeries)**
**Mood**: Welcoming, warm, appetizing, inviting, fun
**Customer Expectation**: Comfort and enjoyment
**Animation Characteristics**:
- **Stagger Delay**: 0.08-0.12s for lively, appetizing rhythm
- **Duration**: 0.4-0.6s for energetic, inviting motion
- **Easing**: Bouncy springs for playful, welcoming feel
- **Transforms**: Playful bounces, gentle sways, appetizing reveals
- **Use Cases**: Menu items, photo galleries, location info, specials

```tsx
const foodBeverageVariants = {
  hidden: { opacity: 0, y: 30, scale: 0.95 },
  visible: { 
    opacity: 1, 
    y: 0, 
    scale: 1,
    transition: { 
      type: "spring", 
      stiffness: 150, 
      damping: 10,
      duration: 0.5
    }
  }
};
```

### **Retail (Boutiques, Small Shops, E-commerce)**
**Mood**: Clean, organized, product-focused, conversion-driven
**Customer Expectation**: Easy browsing and purchasing
**Animation Characteristics**:
- **Stagger Delay**: 0.05-0.08s for quick product reveals
- **Duration**: 0.3-0.4s for fast, efficient browsing
- **Easing**: "easeOut" for clarity and focus
- **Transforms**: Clean fades, simple scales, grid arrangements
- **Use Cases**: Product grids, category sections, checkout flows

```tsx
const retailVariants = {
  hidden: { opacity: 0, y: 15, scale: 0.98 },
  visible: { 
    opacity: 1, 
    y: 0, 
    scale: 1,
    transition: { duration: 0.35, ease: "easeOut" }
  }
};
```

### **Health & Wellness (Medical, Fitness, Therapy, Nutrition)**
**Mood**: Calm, reassuring, clean, professional, healing
**Customer Expectation**: Comfort and expertise
**Animation Characteristics**:
- **Stagger Delay**: 0.15s for calming, reassuring pace
- **Duration**: 0.6-0.8s for gentle, soothing motion
- **Easing**: Soft easing curves, avoid jarring movements
- **Transforms**: Gentle fades, soft y-movement, breathing-like rhythms
- **Use Cases**: Service descriptions, staff profiles, testimonials

```tsx
const healthWellnessVariants = {
  hidden: { opacity: 0, y: 20 },
  visible: { 
    opacity: 1, 
    y: 0,
    transition: { 
      duration: 0.7, 
      ease: [0.25, 0.1, 0.25, 1] // Custom gentle curve
    }
  }
};
```

### **Creative (Agencies, Studios, Photography, Art)**
**Mood**: Expressive, unique, artistic, bold, innovative
**Customer Expectation**: Creativity and visual impact
**Animation Characteristics**:
- **Stagger Delay**: 0.1-0.25s for dramatic, artistic timing
- **Duration**: 0.6-1.2s for impactful, memorable motion
- **Easing**: Custom springs, bouncy effects, creative curves
- **Transforms**: Bold scales, rotations, complex choreography
- **Use Cases**: Portfolio showcases, creative sections, artistic reveals

```tsx
const creativeVariants = {
  hidden: { opacity: 0, scale: 0.8, rotate: -3, y: 40 },
  visible: { 
    opacity: 1, 
    scale: 1, 
    rotate: 0, 
    y: 0,
    transition: { 
      type: "spring", 
      stiffness: 120, 
      damping: 12,
      duration: 1.0
    }
  }
};
```

### **Entertainment (Events, Music, Gaming, Sports)**
**Mood**: Energetic, exciting, engaging, fun, dynamic
**Customer Expectation**: Energy and excitement
**Animation Characteristics**:
- **Stagger Delay**: 0.05-0.1s for rapid, energetic cascades
- **Duration**: 0.3-0.6s for fast, exciting motion
- **Easing**: Bouncy springs, dynamic curves
- **Transforms**: Bold movements, scales, rotations, playful effects
- **Use Cases**: Event listings, media galleries, interactive elements

```tsx
const entertainmentVariants = {
  hidden: { opacity: 0, scale: 0.7, y: 50, rotate: 5 },
  visible: { 
    opacity: 1, 
    scale: 1, 
    y: 0, 
    rotate: 0,
    transition: { 
      type: "spring", 
      stiffness: 200, 
      damping: 8,
      duration: 0.4
    }
  }
};
```

### **Home Services (Cleaning, Landscaping, Moving, Pest Control)**
**Mood**: Reliable, friendly, approachable, solution-oriented
**Customer Expectation**: Dependability and results
**Animation Characteristics**:
- **Stagger Delay**: 0.1s for steady, reliable rhythm
- **Duration**: 0.5-0.7s for solid, dependable motion
- **Easing**: Gentle springs with slight bounce for friendliness
- **Transforms**: Simple, clear movements that build trust
- **Use Cases**: Service listings, before/after showcases, area coverage

```tsx
const homeServiceVariants = {
  hidden: { opacity: 0, x: -30, y: 15 },
  visible: { 
    opacity: 1, 
    x: 0, 
    y: 0,
    transition: { 
      duration: 0.6, 
      ease: "easeOut",
      type: "spring",
      stiffness: 100,
      damping: 14
    }
  }
};
```

## Loading State Animation Patterns

### **Loading to Content Transition System**

```tsx
import { motion, AnimatePresence } from 'framer-motion';
import { useState, useEffect } from 'react';

const LoadingTransition = ({ children, businessType = "tech" }) => {
  const [isLoading, setIsLoading] = useState(true);
  const [showContent, setShowContent] = useState(false);

  // Business-specific loading timings
  const timings = {
    professional: { loadingFade: 0.8, contentDelay: 0.3 },
    tech: { loadingFade: 0.4, contentDelay: 0.2 },
    localService: { loadingFade: 0.6, contentDelay: 0.3 },
    personalCare: { loadingFade: 1.0, contentDelay: 0.4 },
    foodBeverage: { loadingFade: 0.5, contentDelay: 0.2 },
    retail: { loadingFade: 0.3, contentDelay: 0.1 },
    healthWellness: { loadingFade: 0.8, contentDelay: 0.4 },
    creative: { loadingFade: 0.6, contentDelay: 0.3 },
    entertainment: { loadingFade: 0.3, contentDelay: 0.1 },
    homeService: { loadingFade: 0.6, contentDelay: 0.3 }
  };

  const { loadingFade, contentDelay } = timings[businessType] || timings.tech;

  useEffect(() => {
    // Simulate loading completion
    const timer = setTimeout(() => {
      setIsLoading(false);
      // Delay content appearance after loading fade
      setTimeout(() => setShowContent(true), contentDelay * 1000);
    }, 2000);

    return () => clearTimeout(timer);
  }, [contentDelay]);

  const loadingVariants = {
    visible: { opacity: 1, scale: 1 },
    exit: { 
      opacity: 0, 
      scale: 0.8,
      transition: { 
        duration: loadingFade,
        ease: "easeOut"
      }
    }
  };

  const contentVariants = {
    hidden: { opacity: 0 },
    visible: { 
      opacity: 1,
      transition: {
        duration: 0.6,
        ease: "easeOut",
        when: "beforeChildren",
        staggerChildren: businessType === "tech" ? 0.1 : 
                        businessType === "creative" ? 0.2 : 0.15
      }
    }
  };

  return (
    <AnimatePresence mode="wait">
      {isLoading ? (
        <motion.div
          key="loading"
          variants={loadingVariants}
          initial="visible"
          exit="exit"
          className="flex items-center justify-center min-h-screen"
        >
          <LoadingSpinner businessType={businessType} />
        </motion.div>
      ) : showContent ? (
        <motion.div
          key="content"
          variants={contentVariants}
          initial="hidden"
          animate="visible"
        >
          {children}
        </motion.div>
      ) : null}
    </AnimatePresence>
  );
};
```

### **Business-Specific Loading Spinners**

```tsx
const LoadingSpinner = ({ businessType }) => {
  const spinnerVariants = {
    professional: {
      rotate: 360,
      transition: { duration: 2, ease: "linear", repeat: Infinity }
    },
    tech: {
      rotate: 360,
      scale: [1, 1.1, 1],
      transition: { 
        rotate: { duration: 1, ease: "linear", repeat: Infinity },
        scale: { duration: 2, ease: "easeInOut", repeat: Infinity }
      }
    },
    foodBeverage: {
      rotate: [0, 10, -10, 0],
      scale: [1, 1.05, 1],
      transition: { duration: 1.5, ease: "easeInOut", repeat: Infinity }
    },
    creative: {
      rotate: 360,
      x: [0, 10, 0, -10, 0],
      transition: { 
        rotate: { duration: 3, ease: "linear", repeat: Infinity },
        x: { duration: 2, ease: "easeInOut", repeat: Infinity }
      }
    },
    default: {
      rotate: 360,
      transition: { duration: 1.5, ease: "linear", repeat: Infinity }
    }
  };

  return (
    <motion.div
      className="w-12 h-12 border-4 border-primary border-t-transparent rounded-full"
      animate={spinnerVariants[businessType] || spinnerVariants.default}
    />
  );
};
```

### **Page Entrance After Loading**

```tsx
const PageEntranceVariants = {
  professional: {
    hidden: {},
    visible: {
      transition: {
        staggerChildren: 0.15,
        delayChildren: 0.2
      }
    }
  },
  tech: {
    hidden: {},
    visible: {
      transition: {
        staggerChildren: 0.08,
        delayChildren: 0.1
      }
    }
  },
  foodBeverage: {
    hidden: {},
    visible: {
      transition: {
        staggerChildren: 0.12,
        delayChildren: 0.15
      }
    }
  },
  creative: {
    hidden: {},
    visible: {
      transition: {
        staggerChildren: 0.2,
        delayChildren: 0.3
      }
    }
  }
};

const sectionVariants = {
  professional: {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.7 } }
  },
  tech: {
    hidden: { opacity: 0, y: 30, scale: 0.95 },
    visible: { opacity: 1, y: 0, scale: 1, transition: { duration: 0.4 } }
  },
  foodBeverage: {
    hidden: { opacity: 0, y: 25, scale: 0.98 },
    visible: { 
      opacity: 1, y: 0, scale: 1, 
      transition: { type: "spring", stiffness: 150, damping: 12 }
    }
  },
  creative: {
    hidden: { opacity: 0, scale: 0.9, rotate: -2 },
    visible: { 
      opacity: 1, scale: 1, rotate: 0,
      transition: { type: "spring", stiffness: 120, damping: 15 }
    }
  }
};
```

## Core Animation Patterns

### 1. Cascading List Animations
Use when displaying multiple items (cards, features, testimonials):

```tsx
import { motion } from 'framer-motion';

const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1, // Adjust based on business type
      delayChildren: 0.2
    }
  }
};

const itemVariants = {
  hidden: { opacity: 0, y: 20 },
  visible: { 
    opacity: 1, 
    y: 0,
    transition: { duration: 0.5, ease: "easeOut" }
  }
};

// Implementation inside any component
<motion.div
  variants={containerVariants}
  initial="hidden"
  animate="visible"
  className="grid gap-6"
>
  {items.map((item, index) => (
    <motion.div
      key={item.id}
      variants={itemVariants}
      className="card"
    >
      {/* Card content */}
    </motion.div>
  ))}
</motion.div>
```

### 2. Progressive Reveal Animations
Use for hero sections, feature highlights, complex layouts:

```tsx
const progressiveVariants = {
  hidden: {},
  visible: {
    transition: {
      staggerChildren: 0.15, // Adjust based on business type
      delayChildren: 0.2
    }
  }
};

const elementVariants = {
  hidden: { opacity: 0, y: 30 },
  visible: { 
    opacity: 1, 
    y: 0,
    transition: { duration: 0.6, ease: "easeOut" }
  }
};

// Inside hero or feature component
<motion.section
  variants={progressiveVariants}
  initial="hidden"
  animate="visible"
>
  <motion.h1 variants={elementVariants}>
    Main Headline
  </motion.h1>
  <motion.p variants={elementVariants}>
    Supporting text appears after headline
  </motion.p>
  <motion.div variants={elementVariants}>
    <Button>CTA appears last</Button>
  </motion.div>
</motion.section>
```

### 3. Hover-Triggered Cascades
Use for interactive cards, feature grids, portfolio items:

```tsx
const cardVariants = {
  rest: {},
  hover: {
    transition: {
      staggerChildren: 0.05
    }
  }
};

const childVariants = {
  rest: { scale: 1, opacity: 0.8 },
  hover: { 
    scale: 1.05, 
    opacity: 1,
    transition: { duration: 0.2 }
  }
};

// Inside card component
<motion.div
  variants={cardVariants}
  initial="rest"
  whileHover="hover"
  className="card"
>
  <motion.img variants={childVariants} src="..." />
  <motion.h3 variants={childVariants}>Title</motion.h3>
  <motion.p variants={childVariants}>Description</motion.p>
  <motion.button variants={childVariants}>Action</motion.button>
</motion.div>
```

### 4. Scroll-Triggered Animations
Use for sections that appear as user scrolls:

```tsx
import { useInView } from 'framer-motion';
import { useRef } from 'react';

const ScrollReveal = ({ children, businessType = "tech" }) => {
  const ref = useRef(null);
  const isInView = useInView(ref, { once: true, margin: "0px 0px -100px 0px" });
  
  // Business-specific reveal variants
  const revealVariants = {
    professional: { opacity: 0, y: 30 },
    tech: { opacity: 0, y: 40, scale: 0.95 },
    foodBeverage: { opacity: 0, y: 25, scale: 0.98 },
    creative: { opacity: 0, scale: 0.9, rotate: -2 }
  };
  
  return (
    <motion.div
      ref={ref}
      initial={revealVariants[businessType] || revealVariants.tech}
      animate={isInView ? { 
        opacity: 1, 
        y: 0, 
        scale: 1, 
        rotate: 0,
        transition: { duration: 0.6, ease: "easeOut" }
      } : {}}
    >
      {children}
    </motion.div>
  );
};

// Use inside any component
<ScrollReveal businessType="foodBeverage">
  <FeatureSection />
</ScrollReveal>
```

## Implementation Rules for AI

### ✅ DO Implement:
1. **Business-appropriate timing** - Match stagger delays to business mood
2. **Loading state transitions** - Always include loading fade before content
3. **Cascading list reveals** - Features, testimonials, portfolio items
4. **Progressive section reveals** - Hero content, form elements
5. **Hover choreography** - Interactive cards, buttons, navigation
6. **Scroll-triggered animations** - Section entrances, parallax effects
7. **State-based animations** - Loading states, form validation, toggles

### ✅ Business Type Selection Guide:
```tsx
const getBusinessAnimationConfig = (businessType) => {
  const configs = {
    professional: { stagger: 0.15, duration: 0.7, easing: "easeOut" },
    tech: { stagger: 0.08, duration: 0.4, easing: "easeOut" },
    localService: { stagger: 0.12, duration: 0.6, easing: "spring" },
    personalCare: { stagger: 0.18, duration: 0.8, easing: "spring" },
    foodBeverage: { stagger: 0.1, duration: 0.5, easing: "spring" },
    retail: { stagger: 0.06, duration: 0.35, easing: "easeOut" },
    healthWellness: { stagger: 0.15, duration: 0.7, easing: "gentle" },
    creative: { stagger: 0.2, duration: 1.0, easing: "spring" },
    entertainment: { stagger: 0.08, duration: 0.4, easing: "spring" },
    homeService: { stagger: 0.12, duration: 0.6, easing: "spring" }
  };
  
  return configs[businessType] || configs.tech;
};
```

### Performance Considerations:
1. **Use transform properties**: x, y, scale, rotate (GPU accelerated)
2. **Avoid animating**: width, height, padding, margin (causes reflow)
3. **Limit simultaneous animations**: Max 10-15 elements at once
4. **Use `will-change: transform`** for complex animations
5. **Prefer opacity over visibility** for show/hide

## Debug and Testing

### Animation Performance
```tsx
// Add performance monitoring
<motion.div
  onAnimationStart={() => console.log('Animation started')}
  onAnimationComplete={() => console.log('Animation completed')}
  // ... other props
>
```

### Reduced Motion Respect
```tsx
import { useReducedMotion } from 'framer-motion';

const MyComponent = ({ businessType }) => {
  const shouldReduceMotion = useReducedMotion();
  const config = getBusinessAnimationConfig(businessType);
  
  const variants = {
    hidden: { opacity: 0, y: shouldReduceMotion ? 0 : 20 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { 
        duration: shouldReduceMotion ? 0.01 : config.duration 
      }
    }
  };
  
  return <motion.div variants={variants}>Content</motion.div>;
};
```

## Key Principles for AI Implementation

1. **Match Business Personality**: Professional = subtle, Food = playful, Creative = bold
2. **Layer Loading Transitions**: Loading fade → brief pause → content cascade
3. **Think in Customer Psychology**: What timing feels right for this business?
4. **Test Interactions**: Ensure animations don't break functionality
5. **Performance First**: Use efficient properties, limit simultaneous animations
6. **Accessibility Always**: Respect reduced motion preferences

## Common Patterns Summary

- **Professional Services**: Steady, trustworthy reveals (0.15s stagger, 0.7s duration)
- **Tech/SaaS**: Fast, efficient animations (0.08s stagger, 0.4s duration)
- **Food & Beverage**: Playful, appetizing bounces (0.1s stagger, springs)
- **Personal Care**: Elegant, refined motion (0.18s stagger, gentle springs)
- **Local Services**: Reliable, straightforward reveals (0.12s stagger, soft springs)
- **Retail**: Quick, clean product reveals (0.06s stagger, 0.35s duration)
- **Health**: Calm, reassuring motion (0.15s stagger, gentle curves)
- **Creative**: Bold, artistic expressions (0.2s stagger, complex springs)
- **Entertainment**: Fast, exciting dynamics (0.08s stagger, bouncy springs)
- **Home Services**: Dependable, friendly motion (0.12s stagger, soft springs)

This guide ensures AI creates business-appropriate animations that match customer expectations and enhance the user experience across all industries. 