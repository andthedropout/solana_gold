"""
Django settings for helloweb project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import socket
import sys
from distutils.util import strtobool
from pathlib import Path
import dj_database_url # Ensure this import is present

# Build paths inside the project like this: BASE_DIR / "subdir".
BASE_DIR = Path(__file__).resolve().parent.parent

# --- BEGIN DEBUGGING PRINT ---
print(f"DEBUG: Reading DATABASE_URL from env: {os.getenv('DATABASE_URL')}")
print(f"DEBUG: Reading POSTGRES_USER from env: {os.getenv('POSTGRES_USER')}")
print(f"DEBUG: Reading POSTGRES_DB from env: {os.getenv('POSTGRES_DB')}")
# --- END DEBUGGING PRINT ---

SECRET_KEY = os.environ["SECRET_KEY"]

# Define DEBUG early as other settings depend on it
DEBUG = bool(strtobool(os.getenv("DEBUG", "false")))

# When DEBUG is False, set secure cookie settings
SESSION_COOKIE_NAME = os.getenv("SESSION_COOKIE_NAME", "sessionid")
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_NAME = 'csrftoken'  # Explicit name for clarity
CSRF_USE_SESSIONS = False  # Store in cookie instead of session for SPA compatibility
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = False  # Allow JavaScript access to the cookie
CSRF_COOKIE_SAMESITE = 'Lax'  # More permissive SameSite setting for local development

DEBUG_PROPAGATE_EXCEPTIONS = bool(
    strtobool(os.getenv("DEBUG_PROPAGATE_EXCEPTIONS", "false"))
)

# Function to conditionally disable Django Debug Toolbar
def show_toolbar_custom_logic(request):
    print(f"DEBUG_TOOLBAR_CALLBACK: Request path is {request.path}") # Debug print
    # Disable toolbar for any path starting with /api/
    if request.path.startswith('/api/'):
        print("DEBUG_TOOLBAR_CALLBACK: Disabling toolbar for API path.") # Debug print
        return False
    # Default logic
    should_show = DEBUG and not TESTING
    print(f"DEBUG_TOOLBAR_CALLBACK: Default show_toolbar={should_show} (DEBUG={DEBUG}, TESTING={TESTING})") # Debug print
    return should_show

DEBUG_TOOLBAR_CONFIG = {
    'SHOW_TOOLBAR_CALLBACK': show_toolbar_custom_logic,
    'INSERT_BEFORE': '</head>', # Often helps with SPA / non-standard HTML
}

TESTING = "test" in sys.argv

# https://docs.djangoproject.com/en/5.1/ref/settings/#std:setting-ALLOWED_HOSTS
allowed_hosts = os.getenv("ALLOWED_HOSTS", ".localhost,127.0.0.1,[::1]")
ALLOWED_HOSTS = list(map(str.strip, allowed_hosts.split(",")))

# CSRF Trusted Origins for HTTPS POST requests when DEBUG is False
# Get from environment variable
csrf_origins = os.getenv("DJANGO_CSRF_TRUSTED_ORIGINS", "")
CSRF_TRUSTED_ORIGINS = [
    f"https://{origin.strip()}" for origin in csrf_origins.split(",") if origin.strip()
] + [
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

# Tell Django to trust X-Forwarded-Proto header from Railway's proxy
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# CORS Configuration
# In production, restrict to your frontend domain
# In development, allow localhost
cors_allowed_origins = os.getenv("CORS_ALLOWED_ORIGINS", "").split(",")
if cors_allowed_origins and cors_allowed_origins[0]:
    CORS_ALLOWED_ORIGINS = [origin.strip() for origin in cors_allowed_origins if origin.strip()]
else:
    # Development defaults
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:5173",
        "http://127.0.0.1:5173",
        "http://localhost:8000",
        "http://127.0.0.1:8000",
    ]

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

VITE_PORT = int(os.getenv("VITE_PORT", 5173))

# Application definitions
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "rest_framework",
    "users",
    "themes",
    "pages",
    "settings",
    "sections",
    "images",
    "gold_exchange",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

if not TESTING:
    INSTALLED_APPS = [*INSTALLED_APPS, "debug_toolbar"]
    MIDDLEWARE = [
        "debug_toolbar.middleware.DebugToolbarMiddleware",
        *MIDDLEWARE,
    ]

ROOT_URLCONF = "config.urls"

# Define STATIC_ROOT before TEMPLATES uses it
STATIC_ROOT = os.environ.get("STATIC_ROOT", os.path.join(BASE_DIR.parent, "public_collected"))

# Starting with Django 4.1+ we need to pick which template loaders to use
# based on our environment since 4.1+ will cache templates by default.
default_loaders = [
    "django.template.loaders.filesystem.Loader",
    "django.template.loaders.app_directories.Loader",
]

cached_loaders = [("django.template.loaders.cached.Loader", default_loaders)]

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
            STATIC_ROOT,
            os.path.join(BASE_DIR.parent, "public_collected"),
        ],
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            "loaders": default_loaders if DEBUG else cached_loaders,
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
DATABASES = {
    "default": dj_database_url.config(
        conn_max_age=600, # Optional: set connection max age
        default=os.getenv("DATABASE_URL", f"postgres://{os.getenv('POSTGRES_USER', 'helloweb')}:{os.getenv('POSTGRES_PASSWORD', 'password')}@{os.getenv('POSTGRES_HOST', 'postgres')}:{os.getenv('POSTGRES_PORT', '5432')}/{os.getenv('POSTGRES_DB', 'helloweb')}") # noqa E501
    )
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",  # noqa: E501
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",  # noqa: E501
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",  # noqa: E501
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",  # noqa: E501
    },
]

# Sessions
# https://docs.djangoproject.com/en/5.1/ref/settings/#sessions
SESSION_ENGINE = "django.contrib.sessions.backends.db"

# Redis
REDIS_URL = os.getenv("REDIS_URL", "redis://redis:6379/0")

# Caching
# https://docs.djangoproject.com/en/5.1/topics/cache/
# Use dummy cache if Redis not available (production)
if os.getenv("REDIS_URL"):
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.redis.RedisCache",
            "LOCATION": REDIS_URL,
        }
    }
else:
    # No Redis available - use in-memory cache for production
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
            "LOCATION": "unique-snowflake",
        }
    }

# Celery (only configure if Redis available)
if os.getenv("REDIS_URL"):
    CELERY_BROKER_URL = REDIS_URL
    CELERY_RESULT_BACKEND = REDIS_URL

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Future configurations will be added here as needed

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
STATIC_URL = "/static/"
STATIC_ROOT = os.environ.get("STATIC_ROOT", os.path.join(BASE_DIR.parent, "public_collected"))

MEDIA_URL = "/media/"
# Save uploads to static files directory for persistence (but keep different URLs)
MEDIA_ROOT = os.environ.get("MEDIA_ROOT", os.path.join(STATIC_ROOT, "media"))

STATICFILES_DIRS = [
    os.path.join(BASE_DIR.parent, "assets", "dist"),
    os.path.join(BASE_DIR.parent, "public"),
]

# Ensure uploads directory exists in static root
os.makedirs(os.path.join(STATIC_ROOT, 'uploads'), exist_ok=True)

# Configure static files storage
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Configure WhiteNoise to serve static files in production
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = True

# Django Debug Toolbar
# https://django-debug-toolbar.readthedocs.io/
if DEBUG:
    # We need to configure an IP address to allow connections from, but in
    # Docker we can't use 127.0.0.1 since this runs in a container but we want
    # to access the toolbar from our browser outside of the container.
    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [ip[: ip.rfind(".")] + ".1" for ip in ips] + [
        "127.0.0.1",
        "10.0.2.2",
    ]

# Stripe Configuration
# To get your keys: https://dashboard.stripe.com/test/apikeys
STRIPE_PUBLISHABLE_KEY = os.getenv('STRIPE_PUBLISHABLE_KEY', '')
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY', '')
STRIPE_WEBHOOK_SECRET = os.getenv('STRIPE_WEBHOOK_SECRET', '')

# Stripe Product/Price Configuration
# Current price ID for $15/month Professional Hosting subscription
# To create a new price: python manage.py create_stripe_price --amount 1500
STRIPE_PRICE_ID = os.getenv('STRIPE_PRICE_ID', 'price_1RUySYCZHt7sX8aISd71xj01')  # $15/month Professional Hosting

# Stripe Settings - Change these to modify subscription pricing/details
STRIPE_SETTINGS = {
    'MONTHLY_PRICE_ID': STRIPE_PRICE_ID,
    'CURRENCY': 'usd',
    'MONTHLY_AMOUNT': 1500,  # $15.00 in cents - change this to update pricing
    'PRODUCT_NAME': 'Professional Hosting',
    'PRODUCT_DESCRIPTION': 'Monthly hosting subscription with custom domain support'
}

# Domain API Configuration - Cloudflare Integration
# Using Cloudflare's domain availability API (no special credentials required)
DOMAIN_API_CONFIG = {
    'PROVIDER': 'cloudflare',  # Using Cloudflare's public domain API
    # Standard domain pricing (we'll handle registration manually)
    'STANDARD_PRICING': {
        'com': 12.99,  # Annual registration prices
        'net': 14.99,
        'org': 14.99,
        'io': 39.99,
        'co': 24.99,
        'app': 19.99,
        'dev': 19.99,
        'me': 19.99,
        'tv': 29.99,
        'cc': 14.99,
    }
}

# OpenRouter AI Configuration
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY', '')
SITE_URL = os.getenv('SITE_URL', 'http://localhost:8000')

# Solana Configuration
SOLANA_NETWORK = os.getenv('SOLANA_NETWORK', 'devnet')
SOLANA_RPC_URL = os.getenv('SOLANA_RPC_URL', 'https://api.devnet.solana.com')
SGOLD_MINT_ADDRESS = os.getenv('SGOLD_MINT_ADDRESS', '')
MINT_AUTHORITY_KEYPAIR = os.getenv('MINT_AUTHORITY_KEYPAIR', '')
TREASURY_WALLET = os.getenv('TREASURY_WALLET', '')
DEV_FUND_WALLET = os.getenv('DEV_FUND_WALLET', '')
PROFIT_WALLET = os.getenv('PROFIT_WALLET', '')
TRANSACTION_FEE_WALLET = os.getenv('TRANSACTION_FEE_WALLET', '')

# Fee structure (basis points, e.g., 300 = 3%)
BUY_FEE_TREASURY = int(os.getenv('BUY_FEE_TREASURY', '300'))
BUY_FEE_DEV = int(os.getenv('BUY_FEE_DEV', '200'))
SELL_FEE_TREASURY = int(os.getenv('SELL_FEE_TREASURY', '300'))
SELL_FEE_BURN = int(os.getenv('SELL_FEE_BURN', '200'))
