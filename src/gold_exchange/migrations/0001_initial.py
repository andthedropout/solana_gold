# Generated by Django 5.1.3 on 2025-10-01 19:41

import django.core.validators
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="ExchangeQuote",
            fields=[
                (
                    "quote_id",
                    models.CharField(
                        max_length=36,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "user_wallet",
                    models.CharField(db_index=True, max_length=44),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[("buy", "Buy"), ("sell", "Sell")],
                        max_length=4,
                    ),
                ),
                (
                    "sol_amount",
                    models.DecimalField(decimal_places=9, max_digits=20),
                ),
                (
                    "token_amount",
                    models.DecimalField(decimal_places=2, max_digits=20),
                ),
                (
                    "gold_price_usd",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                (
                    "sol_price_usd",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                (
                    "treasury_fee",
                    models.DecimalField(decimal_places=9, max_digits=20),
                ),
                (
                    "dev_fee",
                    models.DecimalField(decimal_places=9, max_digits=20),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField(db_index=True)),
                ("used", models.BooleanField(db_index=True, default=False)),
            ],
            options={
                "verbose_name": "Exchange Quote",
                "verbose_name_plural": "Exchange Quotes",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SystemWallet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "wallet_type",
                    models.CharField(
                        choices=[
                            ("mint_authority", "Mint Authority"),
                            ("treasury", "Treasury"),
                            ("dev_fund", "Development Fund"),
                            ("liquidity", "Liquidity Pool"),
                        ],
                        help_text="Type of system wallet",
                        max_length=20,
                        unique=True,
                    ),
                ),
                (
                    "public_key",
                    models.CharField(
                        help_text="Solana public key (base58)", max_length=44
                    ),
                ),
                (
                    "encrypted_private_key",
                    models.TextField(
                        blank=True,
                        help_text="Encrypted private key (only for wallets that need to sign)",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "System Wallet",
                "verbose_name_plural": "System Wallets",
            },
        ),
        migrations.CreateModel(
            name="GoldTransaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "user_wallet",
                    models.CharField(
                        db_index=True,
                        help_text="User's Solana wallet address",
                        max_length=44,
                    ),
                ),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[("buy", "Buy sGOLD"), ("sell", "Sell sGOLD")],
                        help_text="Type of transaction (buy or sell)",
                        max_length=4,
                    ),
                ),
                (
                    "sol_amount",
                    models.DecimalField(
                        decimal_places=9,
                        help_text="Amount of SOL involved",
                        max_digits=20,
                        validators=[
                            django.core.validators.MinValueValidator(
                                Decimal("1E-9")
                            )
                        ],
                    ),
                ),
                (
                    "token_amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Amount of sGOLD tokens (100 = $10.00)",
                        max_digits=20,
                        validators=[
                            django.core.validators.MinValueValidator(
                                Decimal("0.01")
                            )
                        ],
                    ),
                ),
                (
                    "gold_price_usd",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Gold price in USD per troy ounce at time of transaction",
                        max_digits=10,
                    ),
                ),
                (
                    "sol_price_usd",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="SOL price in USD at time of transaction",
                        max_digits=10,
                    ),
                ),
                (
                    "fees_collected",
                    models.DecimalField(
                        decimal_places=9,
                        default=Decimal("0"),
                        help_text="Total fees collected in SOL",
                        max_digits=20,
                    ),
                ),
                (
                    "treasury_fee",
                    models.DecimalField(
                        decimal_places=9,
                        default=Decimal("0"),
                        help_text="Fee sent to treasury",
                        max_digits=20,
                    ),
                ),
                (
                    "dev_fee",
                    models.DecimalField(
                        decimal_places=9,
                        default=Decimal("0"),
                        help_text="Fee sent to dev fund",
                        max_digits=20,
                    ),
                ),
                (
                    "tx_signature",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Solana transaction signature",
                        max_length=88,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "user_token_account",
                    models.CharField(
                        blank=True,
                        help_text="User's associated token account for sGOLD",
                        max_length=44,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        db_index=True,
                        default="pending",
                        help_text="Current status of the transaction",
                        max_length=10,
                    ),
                ),
                (
                    "status_message",
                    models.TextField(
                        blank=True,
                        help_text="Additional status information or error messages",
                    ),
                ),
                (
                    "quote_id",
                    models.CharField(
                        blank=True,
                        help_text="UUID of the quote used for this transaction",
                        max_length=36,
                        null=True,
                    ),
                ),
                (
                    "quote_expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the quote expires",
                        null=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, db_index=True),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the transaction was completed",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Gold Transaction",
                "verbose_name_plural": "Gold Transactions",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user_wallet", "-created_at"],
                        name="gold_exchan_user_wa_964e4c_idx",
                    ),
                    models.Index(
                        fields=["status", "-created_at"],
                        name="gold_exchan_status_96beee_idx",
                    ),
                ],
            },
        ),
    ]
